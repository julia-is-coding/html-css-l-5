/* BOX MODEL */

/* Content */
/* Padding --> расстояние от границы элемента до его содержимого */ 
/* Border */
/* Margin --> расстояние от границы одного элемента до границы другого */
/* box-sizing (content-box|border-box) */

/* Блочные элементы занимают всю ширину экрана. 
Даже, если мы уменьшим их размер, 
другой элемент не может попасть в одну строку с блочным элементом. */

/* Размер элемента состоит из content и padding. */

/* Но также, если для элемента используем padding и border, 
то нужно его суммировать к значению width.

Мы можем контроллировать значение width с помощью box-sizing. 

По умолчанию box-sizing --> content-box.

ЕСЛИ ДЛЯ box-sizing ЗАДАЁМ ЗНАЧЕНИЕ border-box, 
ТО В width БУДУТ ВКЛЮЧЕНЫ CONTENT, PADDING И BORDER. */

/* Когда содержимое (например, текст) элемента не влазит в границы элемента,
то оно "вылазит" из него (как будто перемещается в другую плоскость и становится поверх других элементов),
но при этом это никак не влияет на окружающие элементы. */

/* По этому нужно сразу учитывать, какой размер будет у элемента
(актуально для иконок и кнопок, например). */

/* Обычно по умолчанию задаётся box-sizing --> border-box потому, 
что такие элементы легче контроллировать. 
Например, если мы делаем кнопки padding и border никак не повлияют на размер этой кнопки.
На размер кнопки будет влиять исключительно content и заданный width, heigth. */

* {
    box-sizing: border-box;
}

body {
    margin: 0;
    background: orange;
}

.bm-example {
    /* margin: 50px; */
    margin: 75px;
    padding: 50px;
    background: #3bbec2;

    font-size: 40px;
    text-align: center;

    border: 4px solid black;

    width: 200px;
    /* width: 50px; */
    height: 50px;
    /* box-sizing: border-box; */
}

/* Варианты написания:

- margin: 50px 20px --> margin-top: 50px; margin-right: 20px; margin-bottom: 50px; margin-left: 20px;
(по часовой сверху)
- margin: 50px 30px 5px --> margin-top: 50px;  margin-right: 30px;  margin-bottom: 5px;
(margin-left будет высчитыватьсяза счёт третьего значения)
- margin: 10px 20px 30px 40px --> margin-top: 10px; margin-right: 20px; margin-bottom: 30px; margin-left: 40px;
(если мы хотим в одну строку задавать значения для всех сторон)

- margin-left: auto --> если у контейнера задана width меньше ширины экрана, то он смещается вправо.
(это свойство работает примерно как text-align)
- margin-rigth: auto; + margin-left: auto; --> для отображения блочного элемента по середине экрана,
если width меньше ширины экрана (если width не задана, то блочный элемент растянется на всю ширину экрана) 

- margin: 50px auto; --> комбинация с auto */

/* ЕСЛИ У ВЕРХНЕГО БЛОЧНОГО ЭЛЕМЕНТА margin-bottom БОЛЬШЕ, ЧЕМ У НИЖНЕГО БЛОЧНОГО ЭЛЕМЕНТА margin-top, 
ТО В ПРИОРИТЕТЕ БУДЕТ margin-bottom ВЕРХНЕГО БЛОЧНОГО ЭЛЕМЕНТА, КОТОРЫЙ БУДЕТ "НАКЛАДЫВАТЬСЯ" НА 
margin-top НИЖНЕГО БЛОЧНОГО ЭЛЕМЕНТА. */

/* Обычно предлагают использовать margin в ОДНОМ НАПРАВЛЕНИИ каком-то во всём документе, 
зная, что margin-ы элементов имеют свойство накладываться по вертикали.
Чаще всего используется margin-top. */

ul {
    margin: 50px;
    background: #acacac;
    list-style: none;
}

li {
    background: #3bbec2;
}

ul li {
    margin-top: 20px;
}

.list li:first-child {
    margin-top: 0;
}

em {
    margin: 40px;
    /* Со строчными элементами margin-ы работают по особенному. Они работают по горизонтали, 
    но не работают по вертикали. То есть раздвигаются только в рамках своей строки. */
    
    /* В строчных элементах margin-ы не накладываются друг на друга по горизонтали. */

    padding: 30px;
    /* Padding-и работают схоже с margin-ами. 
    (если рассматривать по вертикали, они есть, но они не сдвигают элементы) */
}
